<#@ template debug="false" #>
<#@ output extension=".Generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Linq.Expressions;

namespace ExpressionToCodeLib {
  interface IExpressionTypeDispatch {
<#
	foreach(var v in ExpressionTypes3_5()) {
#>
		void Dispatch<#=v.ToString()#>(Expression e);
<#
	}
#>
  }

    internal static class ExpressionTypeDispatch {
		public static void ExpressionDispatch(this IExpressionTypeDispatch dispatcher, Expression e) {
			try{
				switch(e.NodeType) {
<#
	foreach(var v in ExpressionTypes3_5()) {
#>
					case ExpressionType.<#=v.ToString()#>: dispatcher.Dispatch<#=v.ToString()#>(e); return;
<#
	}
#>
					default:
						if(Enum.IsDefined(typeof(ExpressionType),e.NodeType))
							throw new NotImplementedException("ExpressionToCode supports .NET 3.5 expressions only");
						else
							throw new ArgumentOutOfRangeException("Impossible enum value:"+(int)e.NodeType);
				}
			} catch(NotImplementedException nie) {
				throw new ArgumentOutOfRangeException("Could not dispatch expr with nodetype "+e.NodeType+" and type " +e.GetType().Name,nie);
			}
		}
	}
}
 
<#+
	IEnumerable<ExpressionType> ExpressionTypes3_5() {
		return Enum.GetValues(typeof(ExpressionType)).Cast<ExpressionType>().Where(et=>et<= ExpressionType.TypeIs);
	}
#>